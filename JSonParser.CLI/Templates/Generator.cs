// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace JSonParser.CLI.Templates
{
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using JSonParser.SDK;
    using JSonParser.SDK.Utils;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class Generator : GeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 16 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
	
	Generate();

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 20 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"

	private string _fileName;

        
        #line default
        #line hidden
        
        #line 25 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void Generate()
{
	StartNewFile(String.Format("{0}.cs",_context.RootClassName));
	
	string json = File.ReadAllText(_context.JsonPath);

	JsonObject jsonObject = JsonParser.JsonDecode(json) as JsonObject;	
	CreateClass(_context.RootClassName, jsonObject);

	SaveOutput(_fileName);
}
        
        #line default
        #line hidden
        
        #line 37 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void SaveOutput(string outputFileName)
  {
      string templateDirectory = _context.Output;
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	  Console.WriteLine("Wrote at :"+outputFilePath);
  }

        
        #line default
        #line hidden
        
        #line 48 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void StartNewFile(string outputFileName){
	   _fileName = outputFileName;
   }
        
        #line default
        #line hidden
        
        #line 52 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void CreateClass(string className, JsonObject jsonObject)
{	
	WriteUsings();
	WriteHeaderClass(className);
		
	Dictionary<string,JsonObject> subClassesToCreate = WriteContentClass(className, jsonObject);
	
	WriteFooterClass();
	
	GenerateSubClasses(subClassesToCreate);	
}
        
        #line default
        #line hidden
        
        #line 65 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void GenerateSubClasses(Dictionary<string,JsonObject> subClasses)
{	
	if(subClasses!=null)
	{
		foreach(KeyValuePair<string, JsonObject> subClass in subClasses)
		{				
			if(!string.IsNullOrEmpty(subClass.Key))
			{
				SaveOutput(_fileName);
				StartNewFile(String.Format("{0}.cs",subClass.Key));
				CreateClass(subClass.Key, subClass.Value);				
			}
		}	
	}
}
        
        #line default
        #line hidden
        
        #line 82 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private Dictionary<string,JsonObject> WriteContentClass(string className, JsonObject jsonObject)
{
	Dictionary<string,JsonObject> classesToCreate = new Dictionary<string,JsonObject>();
	
	if(jsonObject!=null && jsonObject.Children != null)
	{
		foreach (JsonNode node in jsonObject.Children)
		{ 
			string type = ModelCreator.GetNodeType(node);
			string fieldName = String.Format("_{0}",node.Name.FirstLetterLower());
			string propertyName = node.Name.FirstLetterUpper();			
		
			if(node.Value is JsonArray)
			{
				JsonArray array = ((JsonArray)node.Value);
				if(array.Values.Any())
				{
					if(array.Values.First() is JsonObject)
					{
						classesToCreate.Add(type, (JsonObject)array.Values.First());
					}
				}
				type = string.Format("IEnumerable<{0}>", type);	
			}

			CreateProperty(type, fieldName, propertyName);

			if(node.Value is JsonObject)
			{
				classesToCreate.Add(type, (JsonObject)node.Value);
			}		
		}
    }

	return classesToCreate;
}
        
        #line default
        #line hidden
        
        #line 120 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void WriteUsings()
{
        
        #line default
        #line hidden
        
        #line 121 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Globalization;\r\nus" +
        "ing System.Linq;\r\nusing System.Text;\r\nusing System.Threading;\r\nusing System.Thre" +
        "ading.Tasks;\r\n");

        
        #line default
        #line hidden
        
        #line 129 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
}
        
        #line default
        #line hidden
        
        #line 132 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void WriteHeaderClass(string className)
{
        
        #line default
        #line hidden
        
        #line 133 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("\r\nnamespace ");

        
        #line default
        #line hidden
        
        #line 135 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(_context.NamespaceName));

        
        #line default
        #line hidden
        
        #line 135 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("\r\n{\r\n\r\n\tpublic partial class ");

        
        #line default
        #line hidden
        
        #line 138 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(className));

        
        #line default
        #line hidden
        
        #line 138 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("\r\n\t{\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 141 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
}
        
        #line default
        #line hidden
        
        #line 144 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
private void WriteFooterClass()
{
        
        #line default
        #line hidden
        
        #line 145 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("\t}\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 148 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
}
        
        #line default
        #line hidden
        
        #line 151 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
	private void CreateProperty(string type, string fieldName, string propertyName)
{
        
        #line default
        #line hidden
        
        #line 152 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("\t\tprivate ");

        
        #line default
        #line hidden
        
        #line 153 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type));

        
        #line default
        #line hidden
        
        #line 153 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 153 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

        
        #line default
        #line hidden
        
        #line 153 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(";\r\n\t\tpublic ");

        
        #line default
        #line hidden
        
        #line 154 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(type));

        
        #line default
        #line hidden
        
        #line 154 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 154 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));

        
        #line default
        #line hidden
        
        #line 154 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn ");

        
        #line default
        #line hidden
        
        #line 158 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

        
        #line default
        #line hidden
        
        #line 158 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(";\r\n\t\t\t}\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\t");

        
        #line default
        #line hidden
        
        #line 162 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(fieldName));

        
        #line default
        #line hidden
        
        #line 162 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
this.Write(" = value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 166 "D:\Users\JC\Documents\Visual Studio\Projects\JsonModelCreator\Release1\JSonParser.CLI\Templates\Generator.tt"
}
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class GeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
